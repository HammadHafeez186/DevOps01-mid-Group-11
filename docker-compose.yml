services:
  # PostgreSQL Database Service
  db:
    image: postgres:15-alpine
    container_name: devops_postgres
    environment:
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-Hammad1234}
      POSTGRES_DB: ${DB_NAME:-devops_db}
    ports:
      - "5432:5432"
    networks:
      - app-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-postgres} -d ${DB_NAME:-devops_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Node.js Application Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: devops_app
    environment:
      NODE_ENV: docker
      PORT: ${PORT:-3000}
      DB_HOST: db
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-Hammad1234}
      DB_NAME: ${DB_NAME:-devops_db}
      DATABASE_URL: postgresql://${DB_USERNAME:-postgres}:${DB_PASSWORD:-Hammad1234}@db:5432/${DB_NAME:-devops_db}
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      - .:/app:ro
      - /app/node_modules
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local